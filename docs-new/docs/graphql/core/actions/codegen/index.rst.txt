<div class="meta" description="Codegen for Hasura actions"
keywords="hasura, docs, actions, codegen">

</div>

# Actions codegen

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## Introduction

Actions need HTTP handlers to run the business logic. It might be
inconvenient to write the complete handler code for every action.
Luckily, GraphQL's type system allows us to auto-generate the
boilerplate code for actions.

<div class="note">

<div class="title">

Note

</div>

Hasura currently has codegen set up for a few frameworks. The list of
supported frameworks should grow with contributions from the community.

</div>

## Generating handler code for your action

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

Head to the `Actions -> [action-name] -> Codegen` tab in the console

You can select the framework of your choice to get the corresponding
handler boilerplate code.

<div class="thumbnail" alt="Console codegen tab">

/img/graphql/core/actions/console-codegen-tab.png

</div>

</div>

<div class="tab">

CLI

**Configuration**

Before being able to codegen for actions, you have to configure your
CLI.

Run:

``` bash
hasura actions use-codegen
```

1.  Choose which framework you want to codegen for:

    <div class="thumbnail" alt="CLI Framework Prompt">

    /img/graphql/core/actions/cli-framework-prompt.png

    </div>

2.  Choose if you also wish to clone a starter kit for the chosen
    framework:

    <div class="thumbnail" alt="CLI Starter Kit Prompt">

    /img/graphql/core/actions/cli-starter-kit-prompt.png

    </div>

3.  Choose a path where you want to output the auto-generated code files

    <div class="thumbnail" alt="CLI Starter Kit Prompt">

    /img/graphql/core/actions/cli-output-dir-prompt.png

    </div>

This command will update your `config.yaml` with the codegen config as
per your preferences. You can also set these values manually in
`config.yaml`.

For example:

``` yaml
version: "2"
endpoint: http://localhost:8080
metadata_directory: metadata
migrations_directory: migrations
actions:
  handler_webhook_baseurl: http://localhost:3000
  kind: synchronous
  codegen:
    framework: nodejs-express
    output_dir: ./nodejs-express/src/handlers/
```

**Codegen**

To finally get auto-generated code for an action, run:

``` bash
hasura actions codegen <action-name>
```

The codegen files will be generated at the `output_dir` path from
`config.yaml`.

</div>

</div>

## Codegen for your framework

As of now, Hasura provides codegen for a few frameworks
(`nodejs-express`, `typescript-zeit`, `python-flask` and many more). You
can see the full list in the `Codegen` tab on the console after you've
`created an action <create_actions>`.

We will continue adding more examples to the documentation.

<div class="toctree" maxdepth="1">

Python & Flask \<python-flask>

</div>

### Building your own codegen

If you wish to build a code generator for your framework [read the
contrib
guide](https://github.com/hasura/codegen-assets/blob/master/builder-kit/README.md).

<div class="admonition">

Additional Resources

Introduction to Hasura Actions - [View
Recording](https://hasura.io/events/webinar/hasura-actions/?pg=docs&plcmt=body&cta=view-recording&tech=).

</div>
