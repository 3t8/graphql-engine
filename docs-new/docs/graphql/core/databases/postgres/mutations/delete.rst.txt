<div class="meta"
description="Delete an object from Postgres using a mutation"
keywords="hasura, docs, postgres, mutation, delete">

</div>

# Postgres: Delete mutation

<div class="contents" backlinks="none" depth="1" local="">

Table of contents

</div>

## Auto-generated delete mutation schema

**For example**, the auto-generated schema for the delete mutation field
for a table `article` looks like the following:

```graphql
delete_article (
  where: article_bool_exp!
): article_mutation_response

# response of any mutation on the table "article"
type article_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!
  # data of the affected rows by the mutation
  returning: [article!]!
}

# single object delete (supported from v1.2.0)
delete_article_by_pk (
  # all primary key columns args
  id: Int
): article
```

As you can see from the schema:

-   The `where` argument is compulsory to filter rows to be deleted. See
    `Filter queries <pg_filter_queries>` for filtering options. Objects
    can be deleted based on filters on their own fields or those in
    their nested objects. The `{}` expression can be used to delete all
    rows.
-   You can return the number of affected rows and the affected objects
    (with nested objects) in the response.

See the `delete mutation API reference <delete_syntax>` for the full
specifications.

<div class="note">

<div class="title">

Note

</div>

If a table is not in the `public` Postgres schema, the delete mutation
field will be of the format `delete_<schema_name>_<table_name>`.

</div>

## Delete an object by its primary key

You can delete a single object in a table using the primary key. The
output type is the nullable table object. The mutation returns the
deleted row object or `null` if the row does not exist.

**Example:** Delete an article where `id` is `1`:

<div class="graphiql" view_only="" query="mutation delete_an_object {
  delete_article_by_pk (
    id: 1
  ) {
    id
    title
    user_id
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;delete_article_by_pk&quot;: {
      &quot;id&quot;: 1,
      &quot;title&quot;: &quot;Article 1&quot;,
      &quot;user_id&quot;: 1
    }
  }
}">

</div>

**Example:** Delete a non-existent article:

<div class="graphiql" view_only="" query="mutation delete_an_object {
  delete_article_by_pk (
    id: 100
  ) {
    id
    title
    user_id
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;delete_article_by_pk&quot;: null
  }
}">

</div>

<div class="note">

<div class="title">

Note

</div>

`delete_<table>_by_pk` will **only** be available if you have select
permissions on the table, as it returns the deleted row.

</div>

<div class="admonition">

Supported from

The `delete_<table>_by_pk` mutation is supported in versions `v1.2.0`
and above.

</div>

## Delete objects based on their fields

**Example:** Delete all articles rated less than 3:

<div class="graphiql" view_only=""
query="mutation delete_low_rated_articles {
  delete_article(
    where: {rating: {_lt: 3}}
  ) {
    affected_rows
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;delete_low_rated_articles&quot;: {
      &quot;affected_rows&quot;: 8
    }
  }
}">

</div>

## Delete objects based on nested objects' fields

**Example:** Delete all articles written by a particular author:

<div class="graphiql" view_only=""
query="mutation delete_authors_articles {
  delete_article(
    where: {author: {name: {_eq: &quot;Corny&quot;}}}
  ) {
    affected_rows
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;delete_authors_articles&quot;: {
      &quot;affected_rows&quot;: 2
    }
  }
}">

</div>

## Delete all objects

You can delete all objects in a table using the `{}` expression as the
`where` argument. `{}` basically evaluates to `true` for all objects.

**Example:** Delete all articles:

<div class="graphiql" view_only="" query="mutation delete_all_articles {
  delete_article (
    where: {}
  ) {
    affected_rows
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;delete_article&quot;: {
      &quot;affected_rows&quot;: 20
    }
  }
}">

</div>
