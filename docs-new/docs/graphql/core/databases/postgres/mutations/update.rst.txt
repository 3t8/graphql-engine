<div class="meta"
description="Update an object in Postgres using a mutation"
keywords="hasura, docs, postgres, mutation, update">

</div>

# Postgres: Update mutation

<div class="contents" backlinks="none" depth="1" local="">

Table of contents

</div>

## Auto-generated update mutation schema

**For example**, the auto-generated schema for the update mutation field
for a table `article` looks like the following:

```graphql
update_article (
  _inc: article_inc_input
  _set: article_set_input
  where: article_bool_exp!
): article_mutation_response

# response of any mutation on the table "article"
type article_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!
  # data of the affected rows by the mutation
  returning: [article!]!
}

# single object update (supported from v1.2.0)
update_article_by_pk (
  _inc: article_inc_input
  _set: article_set_input
  # primary key columns arg
  pk_columns: article_pk_columns_input!
): article
```

As you can see from the schema:

-   The `where` argument is compulsory to filter rows to be updated. See
    `Filter queries <pg_filter_queries>` for filtering options. Objects
    can be updated based on filters on their own fields or those in
    their nested objects. The `{}` expression can be used to update all
    rows.
-   You can return the number of affected rows and the affected objects
    (with nested objects) in the response.

See the `update mutation API reference <update_syntax>` for the full
specifications.

<div class="note">

<div class="title">

Note

</div>

-   At least any one of `_set`, `_inc` operators or the jsonb operators
    `_append`, `_prepend`, `_delete_key`, `_delete_elem`,
    `_delete_at_path` is required.
-   If a table is not in the `public` Postgres schema, the update
    mutation field will be of the format
    `update_<schema_name>_<table_name>`.

</div>

## Update an object by its primary key

You can update a single object in a table using the primary key. The
output type is the nullable table object. The mutation returns the
updated row object or `null` if the row does not exist.

**Example:** Update an article where `id` is `1`:

<div class="graphiql" view_only="" query="mutation update_an_article {
  update_article_by_pk (
    pk_columns: {id: 1}
    _set: { is_published: true }
  ) {
    id
    is_published
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article_by_pk&quot;: {
      &quot;id&quot;: 1,
      &quot;is_published&quot;: true
    }
  }
}">

</div>

**Example:** Update a non-existent article:

<div class="graphiql" view_only="" query="mutation update_an_article {
  update_article_by_pk (
    pk_columns: {id: 100}
    _set: { is_published: true }
  ) {
    id
    is_published
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article_by_pk&quot;: null
  }
}">

</div>

<div class="note">

<div class="title">

Note

</div>

`update_<table>_by_pk` will **only** be available if you have select
permissions on the table, as it returns the updated row.

</div>

<div class="admonition">

Supported from

The `update_<table>_by_pk` mutation is supported in versions `v1.2.0`
and above.

</div>

## Update objects based on their fields

**Example:** Update the `rating` and `is_published` of articles with a
low `rating`:

<div class="graphiql" view_only="" query="mutation update_article {
  update_article(
    where: {rating: {_lte: 2}},
    _set: {
      rating: 1,
      is_published: false
    }
  ) {
    affected_rows
    returning {
      id
      title
      content
      rating
      is_published
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 2,
      &quot;returning&quot;: [
        {
          &quot;id&quot;: 3,
          &quot;title&quot;: &quot;article 3&quot;,
          &quot;content&quot;: &quot;lorem ipsum dolor sit amet&quot;,
          &quot;rating&quot;: 1,
          &quot;is_published&quot;: false
        },
        {
          &quot;id&quot;: 6,
          &quot;title&quot;: &quot;article 6&quot;,
          &quot;content&quot;: &quot;lorem ipsum dolor sit amet&quot;,
          &quot;rating&quot;: 1,
          &quot;is_published&quot;: false
        }
      ]
    }
  }
}">

</div>

Using variables:

<div class="graphiql" view_only=""
query="mutation update_article($rating: Int, $changes: article_set_input) {
  update_article(
    where: {rating: {_lte: $rating}},
    _set: $changes
  ) {
    affected_rows
    returning {
      id
      title
      content
      rating
      is_published
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 2,
      &quot;returning&quot;: [
        {
          &quot;id&quot;: 3,
          &quot;title&quot;: &quot;article 3&quot;,
          &quot;content&quot;: &quot;lorem ipsum dolor sit amet&quot;,
          &quot;rating&quot;: 1,
          &quot;is_published&quot;: false
        },
        {
          &quot;id&quot;: 6,
          &quot;title&quot;: &quot;article 6&quot;,
          &quot;content&quot;: &quot;lorem ipsum dolor sit amet&quot;,
          &quot;rating&quot;: 1,
          &quot;is_published&quot;: false
        }
      ]
    }
  }
}
:variables:
{
  &quot;rating&quot;: 2,
  &quot;changes&quot;: {
    &quot;rating&quot;: 1,
    &quot;is_published&quot;: false,
  }
}">

</div>

OR

<div class="graphiql" view_only=""
query="mutation update_article($ratingLimit: Int, $rating: Int, $isPublished: Boolean) {
  update_article(
    where: {rating: {_lte: $ratingLimit}},
    _set: {
      rating: $rating,
      is_published: $isPublished
    }
  ) {
    affected_rows
    returning {
      id
      title
      content
      rating
      is_published
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 2,
      &quot;returning&quot;: [
        {
          &quot;id&quot;: 3,
          &quot;title&quot;: &quot;article 3&quot;,
          &quot;content&quot;: &quot;lorem ipsum dolor sit amet&quot;,
          &quot;rating&quot;: 1,
          &quot;is_published&quot;: false
        },
        {
          &quot;id&quot;: 6,
          &quot;title&quot;: &quot;article 6&quot;,
          &quot;content&quot;: &quot;lorem ipsum dolor sit amet&quot;,
          &quot;rating&quot;: 1,
          &quot;is_published&quot;: false
        }
      ]
    }
  }
}
:variables:
{
  &quot;ratingLimit&quot;: 2,
  &quot;rating&quot;: 1,
  &quot;isPublished&quot;: false
}">

</div>

## Update objects based on nested objects' fields

**Example:** Reset the `rating` of all articles authored by "Sidney":

<div class="graphiql" view_only="" query="mutation update_ratings {
  update_article(
    where: {author: {name: {_eq: &quot;Sidney&quot;}}},
    _set: {rating: null}
  ) {
    affected_rows
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 3
    }
  }
}">

</div>

## Update all objects

You can update all objects in a table using the `{}` expression as the
`where` argument. `{}` basically evaluates to `true` for all objects.

**Example:** Reset rating of all articles:

<div class="graphiql" view_only="" query="mutation reset_rating {
  update_article (
    where: {}
    _set: { rating: null }
  ) {
    affected_rows
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 20
    }
  }
}">

</div>

## Increment/Decrement **int** columns

You can increment/decrement an `int` column with a given value using the
`_inc` operator.

**Example:** Increment the `likes` of an article by 2:

<div class="graphiql" view_only="" query="mutation update_likes {
  update_article(
    where: {id: {_eq: 1}},
    _inc: {likes: 2}  # initial value: 1
  ) {
    affected_rows
    returning {
      id
      likes
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: {
        &quot;id&quot;: 1,
        &quot;likes&quot;: 3
      }
    }
  }
}">

</div>

**Example:** Decrement the `likes` of an article by 2:

<div class="graphiql" view_only="" query="mutation update_likes {
  update_article(
    where: {id: {_eq: 1}},
    _inc: {likes: -2}  # initial value: 3
  ) {
    affected_rows
    returning {
      id
      likes
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: {
        &quot;id&quot;: 1,
        &quot;likes&quot;: 1
      }
    }
  }
}">

</div>

## Update **jsonb** columns

The currently available `jsonb` operators are:

| Operator          | Postgres equivalent | Function                                     |
|-------------------|---------------------|----------------------------------------------|
| `_append`         | `||`                | append json value to a `jsonb` column        |
| `_prepend`        | `||`                | prepend json value to a `jsonb` column       |
| `_delete_key`     | `-`                 | delete top-level key from `jsonb` column     |
| `_delete_elem`    | `-`                 | delete array element from `jsonb` column     |
| `_delete_at_path` | `#-`                | delete element at a path from `jsonb` column |

<div class="note">

<div class="title">

Note

</div>

You can learn more about Postgres jsonb operators
[here](https://www.postgresql.org/docs/current/static/functions-json.html#FUNCTIONS-JSONB-OP-TABLE).

</div>

<div class="contents" backlinks="none" depth="1" local="">

Examples

</div>

### Append a json to a jsonb column

You can append any `jsonb` column with another json value by using the
`_append` operator.

Since the input is a json value, it should be provided through a
variable.

**Example:** Append the json `{"key1": "value1"}` to the `jsonb` column
`extra_info` of the `article` table:

<div class="graphiql" view_only=""
query="mutation update_extra_info($value: jsonb) {
  update_article(
    where: {id: {_eq: 1}},
    _append: {extra_info: $value}  # initial value: {&quot;key&quot;: &quot;value&quot;}
  ) {
    affected_rows
    returning {
      id
      extra_info
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: {
        &quot;id&quot;: 1,
        &quot;extra_info&quot;: {
          &quot;key&quot;: &quot;value&quot;,
          &quot;key1&quot;: &quot;value1&quot;
        }
      }
    }
  }
}
:variables:
{
  &quot;value&quot;: { &quot;key1&quot;: &quot;value1&quot; }
}">

</div>

### Prepend a json to a jsonb column

You can prepend any `jsonb` column with another json value by using the
`_prepend` operator.

Since the input is a json value, it should be provided through a
variable.

**Example:** Prepend the json `{"key0": "value0"}` to the `jsonb` column
`extra_info` of the `article` table:

<div class="graphiql" view_only=""
query="mutation update_extra_info($value: jsonb) {
  update_article(
    where: {id: {_eq: 1}},
    _prepend: {extra_info: $value}  # initial value &quot;{&quot;key&quot;: &quot;value&quot;, &quot;key1&quot;: &quot;value1&quot;}&quot;
  ) {
    affected_rows
    returning {
      id
      extra_info
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: {
        &quot;id&quot;: 1,
        &quot;extra_info&quot;: {
          &quot;key0&quot;: &quot;value0&quot;,
          &quot;key&quot;: &quot;value&quot;,
          &quot;key1&quot;: &quot;value1&quot;
        }
      }
    }
  }
}
:variables:
{
  &quot;value&quot;: { &quot;key0&quot;: &quot;value0&quot; }
}">

</div>

### Delete a top-level key from a jsonb column

You can delete a top-level key of a `jsonb` column by using the
`_delete_key` operator.

The input value should be a `String`.

**Example:** Delete the key `key` in the `jsonb` column `extra_info` of
the `article` table:

<div class="graphiql" view_only="" query="mutation update_extra_info {
  update_article(
    where: {id: {_eq: 1}},
    _delete_key: {extra_info: &quot;key&quot;}  # initial value &quot;{&quot;key0&quot;: &quot;value0, &quot;key&quot;: &quot;value&quot;, &quot;key1&quot;: &quot;value1&quot;}&quot;
  ) {
    affected_rows
    returning {
      id
      extra_info
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: {
        &quot;id&quot;: 1,
        &quot;extra_info&quot;: {
          &quot;key0&quot;: &quot;value0&quot;,
          &quot;key1&quot;: &quot;value1&quot;
        }
      }
    }
  }
}">

</div>

### Delete an element from a jsonb column storing a json array

If a `jsonb` column is storing a json array, you can delete an element
from the array using the `_delete_elem` operator.

The input value should be an `Int`.

**Example:** Delete the element at position 2 in the array value of the
`jsonb` column `extra_info` of the `article` table:

<div class="graphiql" view_only="" query="mutation update_extra_info {
  update_article(
    where: {id: {_eq: 1}},
    _delete_elem: {extra_info: 2}  # initial value &quot;[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&quot;
  ) {
    affected_rows
    returning {
      id
      extra_info
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: {
        &quot;id&quot;: 1,
        &quot;extra_info&quot;: [&quot;a&quot;, &quot;b&quot;]
      }
    }
  }
}">

</div>

### Delete an element at a specific path in a jsonb column

You can delete a field or element of a `jsonb` column at a specified
path by using the `_delete_at_path` operator.

The input value should be a `String Array`.

**Example:** Delete element at json path `name.last` in the `jsonb`
column `extra_info` of the author table:

<div class="graphiql" view_only="" query="mutation update_extra_info {
  update_author(
    where: {id: {_eq: 1}},
    _delete_at_path: {extra_info: [&quot;name&quot;, &quot;first&quot;]}  # initial value &quot;{&quot;name&quot;: {&quot;first&quot;: &quot;first_name&quot;, &quot;last&quot;: &quot;last_name&quot;}}&quot;
  ) {
    affected_rows
    returning {
      id
      extra_info
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;update_author&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: {
        &quot;id&quot;: 1,
        &quot;extra_info&quot;: {
          &quot;name&quot;: {
            &quot;last&quot;: &quot;last_name&quot;
          }
        }
      }
    }
  }
}">

</div>

## Replace all nested array objects of an object

In order to replace all existing nested array objects of an object,
currently it's required to use two mutations: one to delete all the
existing objects and one to add a list of new nested objects.

**Example:** Replace all articles of an author with a new list:

<div class="graphiql" view_only=""
query="mutation updateAuthorArticles($author_id: Int!) {
  delete_articles(
    where: {author_id: {_eq: $author_id}}
  ) {
    affected_rows
  }
  insert_articles(
    objects: [
      {
        author_id: $author_id,
        title: &quot;title&quot;,
        content: &quot;some content&quot;
      },
      {
        author_id: $author_id,
        title: &quot;another title&quot;,
        content: &quot;some other content&quot;
      }
    ]
  ) {
    affected_rows
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;delete_article_tags&quot;: {
      &quot;affected_rows&quot;: 3
    },
    &quot;insert_article_tags&quot;: {
      &quot;affected_rows&quot;: 2
    }
  }
}
:variables:
{
  &quot;author_id&quot;: 21
}">

</div>
