<div class="meta"
description="Set default field values for Postgres using Postgres defaults in Hasura"
keywords="hasura, docs, postgres, schema, default value, Postgres default">

</div>

# Postgres: Setting default values for fields using Postgres defaults

<div class="contents" backlinks="none" depth="1" local="">

Table of contents

</div>

## Introduction

You can set values of certain fields automatically when not explicitly
passed to a fixed value, e.g. true for a boolean field, or output of a
simple SQL function, e.g. now() for a timestamp field, by setting column
default values in the table definition.

<div class="note">

<div class="title">

Note

</div>

The Postgres default value is ignored when a value is explicitly set to
the field.

</div>

**Example:** Say we have a field `created_at` in a table `article` which
we want to be set to the current timestamp whenever a new row is added
to the table:

## Step 1: Modify the table

Edit the `created_at` field and set its default value as the SQL
function `now()`.

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

Open the console and head to `Data -> [article] -> Modify`.

Click the `Edit` button next to the `created_at` field and add `now()`
as a default value.

<div class="thumbnail" alt="Modify the table in the console">

/img/graphql/core/schema/add-default-value.png

</div>

</div>

<div class="tab">

CLI

`Create a migration manually <manual_migrations>` and add the following
SQL statement to the `up.sql` file:

```SQL
ALTER TABLE ONLY "public"."article" ALTER COLUMN "created_at" SET DEFAULT now();
```

Add the following statement to the `down.sql` file in case you need to
`roll back <roll_back_migrations>` the above statement:

```sql
ALTER TABLE article ALTER COLUMN created_at DROP DEFAULT;
```

Apply the migration by running:

```bash
hasura migrate apply
```

</div>

<div class="tab">

API

You can add a default value by using the
`run_sql metadata API <run_sql>`:

```http
POST /v1/query HTTP/1.1
Content-Type: application/json
X-Hasura-Role: admin

{
  "type": "run_sql",
  "args": {
    "sql": "ALTER TABLE article ALTER COLUMN created_at SET DEFAULT now();"
  }
}
```

</div>

</div>

<div class="admonition">

To set an auto-incrementing default value

To set a default value as an auto-incrementing integer you first need to
set up a `sequence` which will be the source of our default value.

Let's say we have a field called `roll_number` which we would like to be
set by default as an auto-incremented integer.

Run the following SQL command to create a new sequence.

```SQL
CREATE SEQUENCE roll_number_seq;
```

Now set the default value of the `roll_number` field as
`nextval('roll_number_seq')`.

</div>

## Step 2: Run an insert mutation

Now if you do not pass the `created_at` field value while running an
insert mutation on the `article` table, its value will be set
automatically by Postgres.

<div class="graphiql" view_only="" query="mutation {
  insert_article(
    objects: [
      {
        title: &quot;GraphQL manual&quot;,
        author_id: 11
      }
    ]) {
    returning {
      id
      title
      created_at
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_article&quot;: {
      &quot;returning&quot;: [
        {
          &quot;id&quot;: 12,
          &quot;title&quot;: &quot;GraphQL manual&quot;,
          &quot;created_at&quot;: &quot;2020-04-23T11:42:30.499315+00:00&quot;
        }
      ]
    }
  }
}">

</div>

## Also see

-   `sql_functions_as_default`
-   `column_presets`
