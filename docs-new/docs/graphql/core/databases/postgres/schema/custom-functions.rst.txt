<div class="meta"
description="Customise the Hasura GraphQL schema with Postgres SQL functions"
keywords="hasura, docs, postgres, schema, sql functions, stored procedures">

</div>

# Postgres: Extend schema with SQL functions

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## What are custom SQL functions?

Custom SQL functions are [user-defined SQL
functions](https://www.postgresql.org/docs/current/sql-createfunction.html)
that can be used to either encapsulate some custom business logic or
extend the built-in SQL functions and operators. SQL functions are also
referred to as **stored procedures**.

Hasura GraphQL engine lets you expose certain types of custom functions
as top level fields in the GraphQL API to allow querying them with
either `queries` or `subscriptions`, or for `VOLATILE` functions as
`mutations`.

<div class="note">

<div class="title">

Note

</div>

Custom SQL functions can also be queried as
`computed fields <computed_fields>` of tables.

</div>

### Supported SQL functions

Currently, only functions which satisfy the following constraints can be
exposed as top level fields in the GraphQL API (*terminology from*
[Postgres
docs](https://www.postgresql.org/docs/current/sql-createfunction.html)):

-   **Function behaviour**: `STABLE` or `IMMUTABLE` functions may *only*
    be exposed as queries. `VOLATILE` functions may be exposed as
    mutations or queries.
-   **Return type**: MUST be `SETOF <table-name>` OR `<table-name>`
    where `<table-name>` is already tracked
-   **Argument modes**: ONLY `IN`

## Creating SQL functions

SQL functions can be created using SQL statements which can be executed
as follows:

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

-   Head to the `Data -> SQL` section of the Hasura console
-   Enter your [create function SQL
    statement](https://www.postgresql.org/docs/current/sql-createfunction.html)
-   Hit the `Run` button

</div>

<div class="tab">

CLI

1.  `Create a migration manually <manual_migrations>` and add your
    [create function SQL
    statement](https://www.postgresql.org/docs/current/sql-createfunction.html)
    to the `up.sql` file. Also, add an SQL statement that reverts the
    previous statement to the `down.sql` file in case you need to
    `roll back <roll_back_migrations>` the migrations.

2.  Apply the migration by running:

    ```bash
    hasura migrate apply
    ```

</div>

<div class="tab">

API

You can add a function by making an API call to the
`run_sql metadata API <run_sql>`:

```http
POST /v1/query HTTP/1.1
Content-Type: application/json
X-Hasura-Role: admin

{
  "type": "run_sql",
  "args": {
    "sql": "<create function statement>"
  }
}
```

</div>

</div>

## Track SQL functions

Functions can be present in the underlying Postgres database without
being exposed over the GraphQL API. In order to expose a function over
the GraphQL API, it needs to be **tracked**.

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

While creating functions from the `Data -> SQL` page, selecting the
`Track this` checkbox will expose the new function over the GraphQL API
right after creation if it is supported.

You can track any existing supported functions in your database from the
`Data -> Schema` page:

<div class="thumbnail" alt="Track functions">

/img/graphql/core/schema/schema-track-functions.png

</div>

</div>

<div class="tab">

CLI

1.  To track the function and expose it over the GraphQL API, edit the
    `functions.yaml` file in the `metadata` directory as follows:

    ```yaml
    - function:
        schema: public
        name: <function name>
    ```

2.  Apply the metadata by running:

    ```bash
    hasura metadata apply
    ```

</div>

<div class="tab">

API

To track the function and expose it over the GraphQL API, make the
following API call to the
`track_function metadata API <track_function>`:

```http
POST /v1/query HTTP/1.1
Content-Type: application/json
X-Hasura-Role: admin

{
  "type": "track_function",
  "args": {
    "schema": "public",
    "name": "<name of function>"
  }
}
```

</div>

</div>

<div class="note">

<div class="title">

Note

</div>

If the `SETOF` table doesn't already exist or your function needs to
return a custom type i.e. row set, create and track an empty table with
the required schema to support the function before executing the above
steps.

</div>

## Use cases

Custom functions are ideal solutions for retrieving some derived data
based on some custom business logic that requires user input to be
calculated. If your custom logic does not require any user input, you
can use `views <custom_views>` instead.

Let's see a few example use cases for custom functions:

### Example: Text-search functions

Let's take a look at an example where the `SETOF` table is already part
of the existing schema:

```plpgsql
articles(id integer, title text, content text)
```

Let's say we've created and tracked a custom function,
`search_articles`, with the following definition:

```plpgsql
CREATE FUNCTION search_articles(search text)
RETURNS SETOF articles AS $$
    SELECT *
    FROM articles
    WHERE
      title ilike ('%' || search || '%')
      OR content ilike ('%' || search || '%')
$$ LANGUAGE sql STABLE;
```

This function filters rows from the `articles` table based on the input
text argument, `search` i.e. it returns `SETOF articles`. Assuming the
`articles` table is being tracked, you can use the custom function as
follows:

<div class="graphiql" view_only="" query="query {
  search_articles(
    args: {search: &quot;hasura&quot;}
  ){
    id
    title
    content
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;search_articles&quot;: [
      {
        &quot;id&quot;: 1,
        &quot;title&quot;: &quot;first post by hasura&quot;,
        &quot;content&quot;: &quot;some content for post&quot;
      },
      {
        &quot;id&quot;: 2,
        &quot;title&quot;: &quot;second post by hasura&quot;,
        &quot;content&quot;: &quot;some other content for post&quot;
      }
    ]
  }
}">

</div>

### Example: Fuzzy match search functions

Let's look at an example of a street address text search with support
for misspelled queries.

First install the
[pg_trgm](https://www.postgresql.org/docs/current/pgtrgm.html)
PostgreSQL extension:

```sql
CREATE EXTENSION pg_trgm;
```

Next create a GIN (or GIST) index in your database for the columns
you'll be querying:

```sql
CREATE INDEX address_gin_idx ON properties
USING GIN ((unit || ' ' || num || ' ' || street || ' ' || city || ' ' || region || ' ' || postcode) gin_trgm_ops);
```

And finally create the custom SQL function in the Hasura console:

```plpgsql
CREATE FUNCTION search_properties(search text)
RETURNS SETOF properties AS $$
    SELECT *
    FROM properties
    WHERE
      search <% (unit || ' ' || num || ' ' || street || ' ' || city || ' ' || region || ' ' || postcode)
    ORDER BY
      similarity(search, (unit || ' ' || num || ' ' || street || ' ' || city || ' ' || region || ' ' || postcode)) DESC
    LIMIT 5;
$$ LANGUAGE sql STABLE;
```

Assuming the `properties` table is being tracked, you can use the custom
function as follows:

<div class="graphiql" view_only="" query="query {
  search_properties(
    args: {search: &quot;Unit 2, 25 Foobar St, Sydney NSW 2000&quot;}
  ){
    id
    unit
    num
    street
    city
    region
    postcode
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;search_properties&quot;: [
      {
        &quot;id&quot;: 1,
        &quot;unit&quot;: &quot;UNIT 2&quot;,
        &quot;num&quot;: &quot;25&quot;,
        &quot;street&quot;: &quot;FOOBAR ST&quot;,
        &quot;city&quot;: &quot;SYDNEY&quot;,
        &quot;region&quot;: &quot;NSW&quot;,
        &quot;postcode&quot;: &quot;2000&quot;
      },
      {
        &quot;id&quot;: 2,
        &quot;unit&quot;: &quot;UNIT 12&quot;,
        &quot;num&quot;: &quot;25&quot;,
        &quot;street&quot;: &quot;FOOBAR ST&quot;,
        &quot;city&quot;: &quot;SYDNEY&quot;,
        &quot;region&quot;: &quot;NSW&quot;,
        &quot;postcode&quot;: &quot;2000&quot;
      }
    ]
  }
}">

</div>

### Example: PostGIS functions

Let's take a look at an example where the `SETOF` table is not part of
the existing schema.

Say you have 2 tables, for user and landmark location data, with the
following definitions (*this example uses the popular spatial database
extension,* [PostGIS](https://postgis.net/)):

```sql
-- User location data
CREATE TABLE user_location (
  user_id INTEGER PRIMARY KEY,
  location GEOGRAPHY(Point)
);

-- Landmark location data
CREATE TABLE landmark (
  id SERIAL PRIMARY KEY,
  name TEXT,
  type TEXT,
  location GEOGRAPHY(Point)
);
```

In this example, we want to fetch a list of landmarks that are near a
given user, along with the user's details in the same query. PostGIS'
built-in function `ST_Distance` can be used to implement this use case.

Since our use case requires an output that isn't a "subset" of any of
the existing tables i.e. the `SETOF` table doesn't exist, let's first
create this table and then create our location search function.

-   create and track the following table:

    ```sql
    -- SETOF table
    CREATE TABLE user_landmarks (
      user_id INTEGER,
      location GEOGRAPHY(Point),
      nearby_landmarks JSON
    );
    ```

-   create and track the following function:

    ```plpgsql
    -- function returns a list of landmarks near a user based on the
    -- input arguments distance_kms and userid
    CREATE FUNCTION search_landmarks_near_user(userid integer, distance_kms integer)
    RETURNS SETOF user_landmarks AS $$
      SELECT  A.user_id, A.location,
      (SELECT json_agg(row_to_json(B)) FROM landmark B
       WHERE (
         ST_Distance(
           ST_Transform(B.location::Geometry, 3857),
           ST_Transform(A.location::Geometry, 3857)
         ) /1000) < distance_kms
       ) AS nearby_landmarks
      FROM user_location A where A.user_id = userid
    $$ LANGUAGE sql STABLE;
    ```

This function fetches user information (*for the given input* `userid`)
and a list of landmarks which are less than `distance_kms` kilometers
away from the user's location as a JSON field. We can now refer to this
function in our GraphQL API as follows:

<div class="graphiql" view_only="" query="query {
  search_landmarks_near_user(
    args: {userid: 3, distance_kms: 20}
  ){
    user_id
    location
    nearby_landmarks
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;search_landmarks_near_user&quot;: [
      {
        &quot;user_id&quot;: 3,
        &quot;location&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;crs&quot;: {
            &quot;type&quot;: &quot;name&quot;,
            &quot;properties&quot;: {
              &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot;
            }
          },
          &quot;coordinates&quot;: [
            12.9406589,
            77.6185572
          ]
        },
        &quot;nearby_landmarks&quot;: [
          {
            &quot;id&quot;: 3,
            &quot;name&quot;: &quot;blue tokai&quot;,
            &quot;type&quot;: &quot;coffee shop&quot;,
            &quot;location&quot;: &quot;0101000020E61000004E74A785DCF22940BE44060399665340&quot;
          },
          {
            &quot;id&quot;: 4,
            &quot;name&quot;: &quot;Bangalore&quot;,
            &quot;type&quot;: &quot;city&quot;,
            &quot;location&quot;: &quot;0101000020E61000005396218E75F12940E78C28ED0D665340&quot;
          }
        ]
      }
    ]
  }
}">

</div>

## Querying custom functions using GraphQL queries

### Aggregations on custom functions

You can query aggregations on a function result using the
`<function-name>_aggregate` field.

**For example**, count the number of articles returned by the function
defined in the text-search example above:

```graphql
query {
  search_articles_aggregate(
    args: {search: "hasura"}
  ){
    aggregate {
      count
    }
  }
}
```

### Using arguments with custom functions

As with tables, arguments like `where`, `limit`, `order_by`, `offset`,
etc. are also available for use with function-based queries.

**For example**, limit the number of articles returned by the function
defined in the text-search example above:

```graphql
query {
  search_articles(
    args: {search: "hasura"},
    limit: 5
  ){
    id
    title
    content
  }
}
```

### Using argument default values for custom functions

If you omit an argument in the `args` input field then the GraphQL
engine executes the SQL function without the argument. Hence, the
function will use the default value of that argument set in its
definition.

**For example:** In the above
`PostGIS functions example <custom_functions_postgis>`, the function
definition can be updated as follows:

```plpgsql
-- input arguments distance_kms (default: 2) and userid
CREATE FUNCTION search_landmarks_near_user(userid integer, distance_kms integer default 2)
```

Search nearby landmarks with `distance_kms` default value which is 2
kms:

<div class="graphiql" view_only="" query="query {
  search_landmarks_near_user(
    args: {userid: 3}
  ){
    user_id
    location
    nearby_landmarks
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;search_landmarks_near_user&quot;: [
      {
        &quot;user_id&quot;: 3,
        &quot;location&quot;: {
          &quot;type&quot;: &quot;Point&quot;,
          &quot;crs&quot;: {
            &quot;type&quot;: &quot;name&quot;,
            &quot;properties&quot;: {
              &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot;
            }
          },
          &quot;coordinates&quot;: [
            12.9406589,
            77.6185572
          ]
        },
        &quot;nearby_landmarks&quot;: [
          {
            &quot;id&quot;: 3,
            &quot;name&quot;: &quot;blue tokai&quot;,
            &quot;type&quot;: &quot;coffee shop&quot;,
            &quot;location&quot;: &quot;0101000020E61000004E74A785DCF22940BE44060399665340&quot;
          }
        ]
      }
    ]
  }
}">

</div>

### Accessing Hasura session variables in custom functions

Create a function with an argument for session variables and track it
with the `track_function_v2 <track_function_v2>` API with the
`session_argument` config set. The session argument will be a JSON
object where keys are session variable names (in lower case) and values
are strings. Use the `->>` JSON operator to fetch the value of a session
variable as shown in the following example.

```plpgsql
-- single text column table
CREATE TABLE text_result(
  result text
);

-- simple function which returns the hasura role
-- where 'hasura_session' will be session argument
CREATE FUNCTION get_session_role(hasura_session json)
RETURNS SETOF text_result AS $$
    SELECT q.* FROM (VALUES (hasura_session ->> 'x-hasura-role')) q
$$ LANGUAGE sql STABLE;
```

<div class="graphiql" view_only="" query="query {
  get_session_role {
    result
  }
}
:response:
{
 &quot;data&quot;: {
   &quot;get_session_role&quot;: [
     {
       &quot;result&quot;: &quot;admin&quot;
     }
   ]
 }
}">

</div>

<div class="note">

<div class="title">

Note

</div>

The specified session argument will not be included in the
`<function-name>_args` input object in the GraphQL schema.

</div>

### Tracking functions with side effects

You can also use the `track_function_v2 <track_function_v2>` API to
track [VOLATILE
functions](https://www.postgresql.org/docs/current/xfunc-volatility.html)
as mutations.

Aside from showing up under the `mutation` root (and presumably having
side-effects), these tracked functions behave the same as described
above for `queries`.

We also permit tracking `VOLATILE` functions under the `query` root, in
which case the user needs to guarantee that the field is idempotent and
side-effect free, in the context of the resulting GraphQL API. One such
use case might be a function that wraps a simple query and performs some
logging visible only to administrators.

<div class="note">

<div class="title">

Note

</div>

It's easy to accidentally give an SQL function the wrong volatility (or
for a function to end up with `VOLATILE` mistakenly, since it's the
default).

</div>

## Permissions for custom functions

A custom function `f` is only accessible to a role `r` if there is a
function permission (see
`Create function permission <pg_create_function_permission>`) defined on
the function `f` for the role `r`. Additionally, role `r` must have
SELECT permissions on the returning table of the function `f`.

`Access control permissions <permission_rules>` configured for the
`SETOF` table of a function are also applicable to the function itself.

**For example**, in our text-search example above, if the role `user`
has access only to certain columns of the table `article`, a validation
error will be thrown if the `search_articles` query is run selecting a
column to which the `user` role doesn't have access to.

<div class="note">

<div class="title">

Note

</div>

In case of **functions exposed as queries**, if the Hasura GraphQL
engine is started with inferring of function permissions set to `true`
(by default: `true`) then a function exposed as a query will be
accessible to a role even if the role doesn't have a function permission
for the function - provided the role has select permission defined on
the returning table of the function.

</div>
