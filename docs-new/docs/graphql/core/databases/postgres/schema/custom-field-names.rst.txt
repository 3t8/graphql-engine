<div class="meta"
description="Use custom field names for Postgres in Hasura"
keywords="hasura, docs, postgres, schema, custom field name, rename">

</div>

# Postgres: Customise auto-generated field names

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## Introduction

Hasura auto-generates GraphQL field names based on your database table
and column names. If you'd like to change the defaults, it is possible
to override and rename the auto-generated table and column field names
exposed over the GraphQL API.

<div class="admonition">

Supported from

This feature is supported in versions `v1.0.0-beta.8` and later.

</div>

## Expose columns with a different name in the GraphQL API

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

Head to the `Data -> [table-name] -> Modify`. On the relevant field,
click `Edit` and change the GraphQL field name to a name of your choice.

<div class="thumbnail" alt="Customise GraphQL field name">

/img/graphql/core/schema/custom-field-name-column.png

</div>

</div>

<div class="tab">

CLI

You can customize auto-generated field names in the `tables.yaml` file
inside the `metadata` directory:

``` yaml
- table:
    schema: public
    name: author
  configuration:
    custom_column_names:
      addr: address
```

Apply the metadata by running:

``` bash
hasura metadata apply
```

</div>

<div class="tab">

API

A custom field name can be set for a column via the following 2 methods:

1.  passing a `table_config` with the `CustomColumnNames` to the
    `track_table_v2` API while tracking a table:

    ``` http
    POST /v1/query HTTP/1.1
    Content-Type: application/json
    X-Hasura-Role: admin

    {
      "type": "track_table",
      "version": 2,
      "args": {
        "table": "author",
        "configuration": {
          "custom_column_names": {
            "addr": "address"
          }
        }
      }
    }
    ```

2.  using the `set_table_custom_fields` API to set the
    `CustomColumnNames`:

    ``` http
    POST /v1/query HTTP/1.1
    Content-Type: application/json
    X-Hasura-Role: admin

    {
      "type": "set_table_custom_fields",
      "version": 2,
      "args": {
        "table": "author",
        "custom_column_names": {
          "addr": "address"
        }
      }
    }
    ```

</div>

</div>

## Expose table root fields with a different name in the GraphQL API

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

Head to the `Data -> [table-name] -> Modify`. Click the `Edit` button in
the `Custom GraphQL Root Fields` section and define names over which
you'd like to expose the table root fields.

<div class="thumbnail" alt="Customise GraphQL root field">

/img/graphql/core/schema/custom-field-name-root-fields.png

</div>

</div>

<div class="tab">

CLI

You can expose table root fields with a different name in the GraphQL
API in the `tables.yaml` file inside the `metadata` directory:

``` yaml
- table:
    schema: public
    name: author
  configuration:
    custom_root_fields:
      select_by_pk: author
      select: authors
```

After that, apply the metadata by running:

``` bash
hasura metadata apply
```

</div>

<div class="tab">

API

A custom field name can be set for a table root field via the following
2 methods:

1.  passing a `table_config` with the `custom_root_fields` names to the
    `track_table_v2` API while tracking a table:

    ``` http
    POST /v1/query HTTP/1.1
    Content-Type: application/json
    X-Hasura-Role: admin

    {
      "type": "track_table",
      "version": 2,
      "args": {
        "table": "author",
        "configuration": {
          "custom_root_fields": {
            "select": "authors",
            "select_by_pk": "author"
          }
        }
      }
    }
    ```

2.  using the `set_table_custom_fields` API to set the
    `custom_root_fields` names

    ``` http
    POST /v1/query HTTP/1.1
    Content-Type: application/json
    X-Hasura-Role: admin

    {
      "type": "set_table_custom_fields",
      "version": 2,
      "args": {
        "table": "author",
        "custom_root_fields": {
            "select": "authors",
            "select_by_pk": "author"
        }
      }
    }
    ```

</div>

</div>
