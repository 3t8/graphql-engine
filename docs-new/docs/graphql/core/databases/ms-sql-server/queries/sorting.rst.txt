<div class="meta"
description="Sort query results on MS SQL Server in Hasura"
keywords="hasura, docs, ms sql server, query, sort">

</div>

# MS SQL Server: Sort query results

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## The **order_by** argument

Results from your query can be sorted by using the `order_by` argument.
The argument can be used to sort nested objects too.

The sort order (ascending vs. descending) is set by specifying the `asc`
or `desc` enum value for the column name in the `order_by` input object,
e.g. `{name: desc}`.

By default, for ascending ordering `null` values are returned at the end
of the results and for descending ordering `null` values are returned at
the start of the results. `null` values can be fetched first on
ascending ordering by specifying `asc_nulls_first` and last on
descending ordering by specifying `desc_nulls_last` enum value e.g.
`{name: desc_nulls_last}`.

The `order_by` argument takes an array of objects to allow sorting by
multiple columns.

You can also use nested objects' fields to sort the results. Only
**columns from object relationships** and **aggregates from array
relationships** can be used for sorting.

You can see the complete specification of the `order_by` argument in the
`API reference <OrderByExp>`.

The following are example queries for different sorting use cases:

## Sorting objects

**Example:** Fetch a list of authors sorted by their names in an
ascending order:

<div class="graphiql" view_only="" query="query {
  authors (
    order_by: {name: asc}
  ) {
    id
    name
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;authors&quot;: [
      {
        &quot;id&quot;: 5,
        &quot;name&quot;: &quot;Amii&quot;
      },
      {
        &quot;id&quot;: 4,
        &quot;name&quot;: &quot;Anjela&quot;
      },
      {
        &quot;id&quot;: 8,
        &quot;name&quot;: &quot;April&quot;
      },
      {
        &quot;id&quot;: 2,
        &quot;name&quot;: &quot;Beltran&quot;
      },
      {
        &quot;id&quot;: 7,
        &quot;name&quot;: &quot;Berti&quot;
      },
      {
        &quot;id&quot;: 6,
        &quot;name&quot;: &quot;Corny&quot;
      }
    ]
  }
}">

</div>

## Sorting nested objects

**Example:** Fetch a list of authors sorted by their names with a list
of their articles that is sorted by their rating:

<div class="graphiql" view_only="" query="query {
  authors (order_by: {name: asc}) {
    id
    name
    articles(order_by: {rating: desc}) {
      id
      title
      rating
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;authors&quot;: [
      {
        &quot;id&quot;: 5,
        &quot;name&quot;: &quot;Amii&quot;,
        &quot;articles&quot;: [
          {
            &quot;rating&quot;: 5,
            &quot;id&quot;: 17,
            &quot;title&quot;: &quot;montes nascetur ridiculus&quot;
          },
          {
            &quot;rating&quot;: 3,
            &quot;id&quot;: 12,
            &quot;title&quot;: &quot;volutpat quam pede&quot;
          },
          {
            &quot;rating&quot;: 2,
            &quot;id&quot;: 4,
            &quot;title&quot;: &quot;vestibulum ac est&quot;
          }
        ]
      },
      {
        &quot;id&quot;: 4,
        &quot;name&quot;: &quot;Anjela&quot;,
        &quot;articles&quot;: [
          {
            &quot;rating&quot;: 4,
            &quot;id&quot;: 3,
            &quot;title&quot;: &quot;amet justo morbi&quot;
          },
          {
            &quot;rating&quot;: 1,
            &quot;id&quot;: 1,
            &quot;title&quot;: &quot;sit amet&quot;
          }
        ]
      },
      {
        &quot;id&quot;: 8,
        &quot;name&quot;: &quot;April&quot;,
        &quot;articles&quot;: [
          {
            &quot;rating&quot;: 4,
            &quot;id&quot;: 13,
            &quot;title&quot;: &quot;vulputate elementum&quot;
          },
          {
            &quot;rating&quot;: 2,
            &quot;id&quot;: 20,
            &quot;title&quot;: &quot;eu nibh&quot;
          }
        ]
      }
    ]
  }
}">

</div>

## Sorting based on nested object's fields

Only **columns from object relationships** and **aggregates from array
relationships** can be used for sorting.

### For object relationships

For object relationships only columns can be used for sorting.

**Example:** Fetch a list of articles that are sorted by their author's
ids in descending order:

<div class="graphiql" view_only="" query="query {
  articles (
    order_by: {author: {id: desc}}
  ) {
    id
    rating
    published_on
    author {
      id
      name
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;id&quot;: 3,
        &quot;title&quot;: &quot;Article 3&quot;,
        &quot;content&quot;: &quot;Sample article content 3&quot;,
        &quot;author&quot;: {
          &quot;id&quot;: 2,
          &quot;name&quot;: &quot;Author 2&quot;
        }
      },
      {
        &quot;id&quot;: 1,
        &quot;title&quot;: &quot;Article 1&quot;,
        &quot;content&quot;: &quot;Sample article content 1&quot;,
        &quot;author&quot;: {
          &quot;id&quot;: 1,
          &quot;name&quot;: &quot;Author 1&quot;
        }
      },
      {
        &quot;id&quot;: 2,
        &quot;title&quot;: &quot;Article 2&quot;,
        &quot;content&quot;: &quot;Sample article content 2&quot;,
        &quot;author&quot;: {
          &quot;id&quot;: 1,
          &quot;name&quot;: &quot;Author 1&quot;
        }
      }
    ]
  }
}">

</div>

### For array relationships

For array relationships only aggregates can be used for sorting.

**Example:** Fetch a list of authors sorted in descending order of their
article count:

<div class="graphiql" view_only="" query="query {
  authors (
    order_by: {
      articles_aggregate: {count: desc}
    }
  ) {
    id
    name
    articles_aggregate {
      aggregate{
        count
      }
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;authors&quot;: [
      {
        &quot;id&quot;: 5,
        &quot;name&quot;: &quot;Amii&quot;,
        &quot;articles_aggregate&quot;:{
          &quot;aggregate&quot;: {
            &quot;count&quot;: 3
          }
        }
      },
      {
        &quot;id&quot;: 4,
        &quot;name&quot;: &quot;Anjela&quot;,
        &quot;articles_aggregate&quot;:{
          &quot;aggregate&quot;: {
            &quot;count&quot;: 2
          }
        }
      },
      {
        &quot;id&quot;: 8,
        &quot;name&quot;: &quot;April&quot;,
        &quot;articles_aggregate&quot;:{
          &quot;aggregate&quot;: {
            &quot;count&quot;: 2
          }
        }
      }
    ]
  }
}">

</div>

**Example:** Fetch a list of authors sorted in increasing order of their
highest article rating:

<div class="graphiql" view_only="" query="query {
  authors(
    order_by: {
      articles_aggregate: {
        max: {rating: asc_nulls_last}
      }
    }
  ) {
    id
    name
    articles_aggregate {
      aggregate{
        max {rating}
      }
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;authors&quot;: [
      {
        &quot;id&quot;: 7,
        &quot;name&quot;: &quot;Berti&quot;,
        &quot;articles_aggregate&quot;: {
          &quot;aggregate&quot;: {
            &quot;max&quot;: {
              &quot;rating&quot;: 2
            }
          }
        }
      },
      {
        &quot;id&quot;: 2,
        &quot;name&quot;: &quot;Beltran&quot;,
        &quot;articles_aggregate&quot;: {
          &quot;aggregate&quot;: {
            &quot;max&quot;: {
              &quot;rating&quot;: 3
            }
          }
        }
      },
      {
        &quot;id&quot;: 8,
        &quot;name&quot;: &quot;April&quot;,
        &quot;articles_aggregate&quot;: {
          &quot;aggregate&quot;: {
            &quot;max&quot;: {
              &quot;rating&quot;: 4
            }
          }
        }
      },
      {
        &quot;id&quot;: 3,
        &quot;name&quot;: &quot;Sidney&quot;,
        &quot;articles_aggregate&quot;: {
          &quot;aggregate&quot;: {
            &quot;max&quot;: {
              &quot;rating&quot;: 4
            }
          }
        }
      },
      {
        &quot;id&quot;: 5,
        &quot;name&quot;: &quot;Amii&quot;,
        &quot;articles_aggregate&quot;: {
          &quot;aggregate&quot;: {
            &quot;max&quot;: {
              &quot;rating&quot;: 5
            }
          }
        }
      },
      {
        &quot;id&quot;: 9,
        &quot;name&quot;: &quot;Ninnetta&quot;,
        &quot;articles_aggregate&quot;: {
          &quot;aggregate&quot;: {
            &quot;max&quot;: {
              &quot;rating&quot;: null
            }
          }
        }
      }
    ]
  }
}">

</div>

## Sorting by multiple fields

**Example:** Fetch a list of articles that is sorted by their rating
(descending) and then on their published date (ascending with nulls
first):

<div class="graphiql" view_only="" query="query {
  articles (
    order_by: [
      {rating: desc},
      {published_on: asc_nulls_first}
    ]
  ) {
    id
    rating
    published_on
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;id&quot;: 17,
        &quot;rating&quot;: 5,
        &quot;published_on&quot;: null
      },
      {
        &quot;id&quot;: 14,
        &quot;rating&quot;: 4,
        &quot;published_on&quot;: null
      },
      {
        &quot;id&quot;: 7,
        &quot;rating&quot;: 4,
        &quot;published_on&quot;: &quot;2016-07-09&quot;
      },
      {
        &quot;id&quot;: 3,
        &quot;rating&quot;: 4,
        &quot;published_on&quot;: &quot;2017-05-26&quot;
      }
    ]
  }
}">

</div>
