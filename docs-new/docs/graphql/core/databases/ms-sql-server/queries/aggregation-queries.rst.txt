<div class="meta"
description="Make aggregation queries on MS SQL Server with Hasura"
keywords="hasura, docs, ms sql server, query, aggregation query">

</div>

# MS SQL Server: Aggregation queries

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## **Aggregate** fields

You can fetch aggregations on columns along with nodes using an
aggregation query.

The **name of the aggregate field** is of the form
`<field-name> + _aggregate`.

Common aggregation functions are `count`, `sum`, `avg`, `max`, `min`,
etc. You can see the complete specification of the aggregate field in
the `API reference <AggregateObject>`.

<div class="note">

<div class="title">

Note

</div>

For more advanced use cases, you can use
`views <ms_sql_server_custom_views>`.

</div>

## Fetch aggregated data of an object

**Example:** Fetch a list of articles with aggregated data of their
rating:

<div class="graphiql" view_only="" query="query {
  articles_aggregate {
    aggregate {
      count
      sum {
        rating
      }
      avg {
        rating
      }
      max {
        rating
      }
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles_aggregate&quot;: {
      &quot;aggregate&quot;: {
        &quot;count&quot;: 10,
        &quot;sum&quot;: {
          &quot;rating&quot;: 26
        },
        &quot;avg&quot;: {
          &quot;rating&quot;: 2.6
        },
        &quot;max&quot;: {
          &quot;rating&quot;: 4
        }
      }
    }
  }
}">

</div>

## Fetch aggregated data on nested objects

The following is an example of a nested object query with aggregations
on the **array relationship** between an author and articles.

**Example:** Fetch author with id "1" and a nested list of articles with
aggregated data of their rating:

<div class="graphiql" view_only="" query="query {
  authors (where: {id: {_eq: 1}}) {
    id
    name
    articles_aggregate {
      aggregate {
        count
        avg {
          rating
        }
        max {
          rating
        }
      }
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;authors&quot;: [
      {
        &quot;id&quot;: 1,
        &quot;name&quot;: &quot;Justin&quot;,
        &quot;articles_aggregate&quot;: {
          &quot;aggregate&quot;: {
            &quot;count&quot;: 2,
            &quot;avg&quot;: {
              &quot;rating&quot;: 2.5
            },
            &quot;max&quot;: {
              &quot;rating&quot;: 4
            }
          },
        }
      }
    ]
  }
}">

</div>
