<div class="meta"
description="Use variables, aliases, fragments and directives in Hasura queries"
keywords="hasura, docs, query, variable, alias, fragment, directive">

</div>

# Using variables / aliases / fragments / directives in queries

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## Using variables

In order to make a query re-usable, it can be made dynamic by using
variables.

**Example:** Fetch an author by their `author_id`:

<div class="graphiql" view_only=""
query="query getArticles($author_id: Int!) {
  articles(
    where: { author_id: { _eq: $author_id } }
  ) {
    id
    title
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;id&quot;: 15,
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;
      },
      {
        &quot;id&quot;: 6,
        &quot;title&quot;: &quot;How to be successful on broadway&quot;
      }
    ]
  }
}
:variables:
{
  &quot;author_id&quot;: 1
}">

</div>

## Using aliases

Aliases can be used to return objects with a different name than their
field name. This is especially useful while fetching the same type of
objects with different arguments in the same query.

**Example:** First, fetch all articles. Second, fetch the two top-rated
articles. Third, fetch the worst-rated article:

<div class="graphiql" view_only="" query="query getArticles {
  articles {
    title
    rating
  }
  topTwoArticles: articles(
    order_by: {rating: desc},
    limit: 2
  ) {
    title
    rating
  }
  worstArticle: articles(
    order_by: {rating: asc},
    limit: 1
  ) {
    title
    rating
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;,
        &quot;rating&quot;: 4
      },
      {
        &quot;title&quot;: &quot;How to be successful on broadway&quot;,
        &quot;rating&quot;: 20
      },
      {
        &quot;title&quot;: &quot;How to make fajitas&quot;,
        &quot;rating&quot;: 6
      }
    ],
    &quot;topTwoArticles&quot;: [
      {
        &quot;title&quot;: &quot;How to be successful on broadway&quot;,
        &quot;rating&quot;: 20
      },
      {
        &quot;title&quot;: &quot;How to make fajitas&quot;,
        &quot;rating&quot;: 6
      }
    ],
    &quot;worstArticle&quot;: [
      {
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;,
        &quot;rating&quot;: 4
      }
    ]
  }
}">

</div>

## Using fragments

Sometimes, queries can get long and confusing. A fragment is a set of
fields with any chosen name. This fragment can then be used to represent
the defined set.

**Example:** Creating a fragment for a set of `article` fields (`id` and
`title`) and using it in a query:

<div class="graphiql" view_only=""
query="fragment articleFields on articles {
  id
  title
}
query getArticles {
  articles {
    ...articleFields
  }
  topTwoArticles: articles(
    order_by: {rating: desc},
    limit: 2
  ) {
    ...articleFields
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;id&quot;: 3,
        &quot;title&quot;: &quot;How to make fajitas&quot;
      },
      {
        &quot;id&quot;: 15,
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;
      },
      {
        &quot;id&quot;: 6,
        &quot;title&quot;: &quot;How to be successful on broadway&quot;
      }
    ],
    &quot;topTwoArticles&quot;: [
      {
        &quot;id&quot;: 6,
        &quot;title&quot;: &quot;How to be successful on broadway&quot;
      },
      {
        &quot;id&quot;: 3,
        &quot;title&quot;: &quot;How to make fajitas&quot;
      }
    ]
  }
}">

</div>

## Using directives

Directives make it possible to include or skip a field based on a
boolean expression passed as a query variable.

### @include(if: Boolean)

With `@include(if: Boolean)`, it is possible to include a field in the
query result based on a Boolean expression.

**Example:** The query result includes the field `publisher`, as
`$with_publisher` is set to `true`:

<div class="graphiql" view_only=""
query="query getArticles($with_publisher: Boolean!) {
  articles {
    title
    publisher @include(if: $with_publisher)
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;,
        &quot;publisher&quot;: &quot;Mountain World&quot;
      },
      {
        &quot;title&quot;: &quot;How to be successful on broadway&quot;,
        &quot;publisher&quot;: &quot;Broadway World&quot;
      },
      {
        &quot;title&quot;: &quot;How to make fajitas&quot;,
        &quot;publisher&quot;: &quot;Fajita World&quot;
      }
    ]
  }
}
:variables:
{
  &quot;with_publisher&quot;: true
}">

</div>

**Example:** The query result doesn't include the field `publisher`, as
`$with_publisher` is set to `false`:

<div class="graphiql" view_only=""
query="query getArticles($with_publisher: Boolean!) {
  articles {
    title
    publisher @include(if: $with_publisher)
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;
      },
      {
        &quot;title&quot;: &quot;How to be successful on broadway&quot;
      },
      {
        &quot;title&quot;: &quot;How to make fajitas&quot;
      }
    ]
  }
}
:variables:
{
  &quot;with_publisher&quot;: false
}">

</div>

### @skip(if: Boolean)

With `@skip(if: Boolean)`, it is possible to exclude (skip) a field in
the query result based on a Boolean expression.

**Example:** The query result doesn't include the field `publisher`, as
`$with_publisher` is set to `true`:

<div class="graphiql" view_only=""
query="query getArticles($with_publisher: Boolean!) {
  articles {
    title
    publisher @skip(if: $with_publisher)
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;
      },
      {
        &quot;title&quot;: &quot;How to be successful on broadway&quot;
      },
      {
        &quot;title&quot;: &quot;How to make fajitas&quot;
      }
    ]
  }
}
:variables:
{
  &quot;with_publisher&quot;: true
}">

</div>

**Example:** The query result includes the field `publisher`, as
`$with_publisher` is set to `false`:

<div class="graphiql" view_only=""
query="query getArticles($with_publisher: Boolean!) {
  articles {
    title
    publisher @skip(if: $with_publisher)
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;articles&quot;: [
      {
        &quot;title&quot;: &quot;How to climb Mount Everest&quot;,
        &quot;publisher&quot;: &quot;Mountain World&quot;
      },
      {
        &quot;title&quot;: &quot;How to be successful on broadway&quot;,
        &quot;publisher&quot;: &quot;Broadway World&quot;
      },
      {
        &quot;title&quot;: &quot;How to make fajitas&quot;,
        &quot;publisher&quot;: &quot;Fajita World&quot;
      }
    ]
  }
}
:variables:
{
  &quot;with_publisher&quot;: false
}">

</div>
