<div class="meta"
description="Use custom field names for MS SQL Server in Hasura"
keywords="hasura, docs, ms sql server, schema, custom field name, rename">

</div>

# MS SQL Server: Customise auto-generated field names

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## Introduction

Hasura auto-generates GraphQL field names based on your database table
and column names. If you'd like to change the defaults, it is possible
to override and rename the auto-generated table and column field names
exposed over the GraphQL API.

<div class="admonition">

Supported from

This feature is supported in versions `v1.0.0-beta.8` and later.

</div>

## Expose columns with a different name in the GraphQL API

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

Console support coming soon

</div>

<div class="tab">

CLI

You can customize auto-generated field names in the `tables.yaml` file
inside the `metadata` directory:

```yaml
- table:
    schema: dbo
    name: author
  configuration:
    custom_column_names:
      addr: address
```

Apply the metadata by running:

```bash
hasura metadata apply
```

</div>

<div class="tab">

API

A custom field name can be set for a column via the following 2 methods:

1.  Passing a `table_config` with the `CustomColumnNames` to the
    `mssql_set_table_customization` API while tracking a table:

    ```http
    POST /v1/metadata HTTP/1.1
    Content-Type: application/json
    X-Hasura-Role: admin

    {
      "type": "mssql_set_table_customization",
      "args": {
        "source": "<db_name>",
        "table": "authors",
        "configuration": {
          "custom_column_names": {
            "id": "AuthorId"
          }
        }
      }
    }
    ```

2.  Customization can be done at the time of creation using
    `mssql_track_table` API also.

</div>

</div>

## Expose table root fields with a different name in the GraphQL API

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

Console support coming soon

</div>

<div class="tab">

CLI

You can expose table root fields with a different name in the GraphQL
API in the `tables.yaml` file inside the `metadata` directory:

```yaml
- table:
    schema: dbo
    name: authors
  configuration:
    custom_root_fields:
      select: authors_aggregate
```

After that, apply the metadata by running:

```bash
hasura metadata apply
```

</div>

<div class="tab">

API

A custom field name can be set for a table root field via the following
2 methods:

1.  Passing a `table_config` with the `custom_root_fields` to the
    `mssql_set_table_customization` API while tracking a table:

    ```http
    POST /v1/metadata HTTP/1.1
    Content-Type: application/json
    X-Hasura-Role: admin

    {
      "type": "mssql_set_table_customization",
      "args": {
        "source": "<db_name>",
        "table": "authors",
        "configuration": {
          "custom_column_names": {
            "id": "AuthorId"
          },
          "custom_root_fields": {
            "select": "authors",
            "select_aggregate": "authors_aggregate"
          }
        }
      }
    }
    ```

2.  Customization can be done at the time of creation using
    `mssql_track_table` API also.

</div>

</div>
