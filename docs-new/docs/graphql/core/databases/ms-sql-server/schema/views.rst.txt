<div class="meta"
description="Customise the Hasura GraphQL schema with views"
keywords="hasura, docs, schema, view">

</div>

# MS SQL Server: Extend schema with views

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## What are views?

[Views](https://docs.microsoft.com/en-us/sql/relational-databases/views/create-views?view=sql-server-ver15)
can be used to expose the results of a custom query as a virtual table.
Views are not persisted physically i.e. the query defining a view is
executed whenever data is requested from the view.

Hasura GraphQL engine lets you expose views over the GraphQL API to
allow querying them using both `queries` and `subscriptions` just like
regular tables.

## Creating views

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

Views can be created using SQL which can be run in the Hasura console:

-   Head to the `Data -> SQL` section of the Hasura console
-   Enter your [create view SQL
    statement](https://docs.microsoft.com/en-us/sql/relational-databases/views/create-views?view=sql-server-ver15)
-   Hit the `Run` button

</div>

<div class="tab">

CLI

1.  `Create a migration manually <manual_migrations>` and add your
    [create view SQL
    statement](https://docs.microsoft.com/en-us/sql/relational-databases/views/create-views?view=sql-server-ver15)
    to the `up.sql` file. Also, add an SQL statement to the `down.sql`
    file that reverts the previous statement.

2.  Apply the migration and metadata by running:

    ```bash
    hasura migrate apply
    ```

</div>

<div class="tab">

API

You can add a view by using the
`schema_run_sql metadata API <schema_run_sql>`:

```http
POST /v2/query HTTP/1.1
Content-Type: application/json
X-Hasura-Role: admin

{
  "type": "run_sql",
  "args": {
    "source": "<db-name>",
    "sql": "<create view statement>"
  }
}
```

</div>

</div>

## Tracking views

Views can be present in the underlying MS SQL Server database without
being exposed over the GraphQL API. In order to expose a view over the
GraphQL API, it needs to be **tracked**.

<div class="rst-class">

api_tabs

</div>

<div class="tabs">

<div class="tab">

Console

While creating views from the `Data -> SQL` page, selecting the
`Track this` checkbox will expose the new view over the GraphQL API
right after creation.

You can track any existing views in your database from the
`Data -> Schema` page:

<div class="thumbnail" alt="Track views">

/img/graphql/core/schema/schema-track-views.png

</div>

</div>

<div class="tab">

CLI

1.  To track the view and expose it over the GraphQL API, edit the
    `tables.yaml` file in the `metadata` directory as follows:

    ```yaml
    - table:
        schema: dbo
        name: authors
    - table:
        schema: dbo
        name: articles
    - table:
        schema: dbo
        name: <name of view>
    ```

2.  Apply the metadata by running:

    ```bash
    hasura metadata apply
    ```

</div>

<div class="tab">

API

To track the view and expose it over the GraphQL API, make the following
API call to the `mssql_track_table metadata API <mssql_track_table>`:

```http
POST /v1/metadata HTTP/1.1
Content-Type: application/json
X-Hasura-Role: admin

{
  "type": "mssql_track_table",
  "args": {
    "table": "authors",
    "source": "default",
    "schema": "dbo",
    "name": "<name of view>"
  }
}
```

</div>

</div>

## Use cases

Views are ideal solutions for retrieving some derived data based on some
custom business logic.

Let's look at a few example use cases for views:

### Example: Group by and then aggregate

Sometimes we might want to fetch some data derived by aggregating (avg,
min, max, etc.) over a group of rows in a table.

Letâ€™s say we want to fetch the average article rating for each author in
the following schema:

```plpgsql
author(id integer, name text, city text, email text, phone integer, address text)

article(id integer, title text, content text, rating integer, author_id integer)
```

A view that averages the rating of articles for each author can be
created using the following SQL query:

```SQL
CREATE VIEW author_average_rating AS
  SELECT author_id, avg(rating)
    FROM article
    GROUP BY author_id
```

### Example: Hide certain fields of a table

Sometimes we might have some sensitive information in a table which we
wouldn't want to expose.

Let's say, we want to expose the following `author` table without the
fields `email`, `phone` and `address`:

```plpgsql
author(id integer, name text, city text, email text, phone integer, address text)
```

A view that only exposes the non-sensitive fields of the `author` table
can be created using the following SQL query:

```SQL
CREATE VIEW author_public AS
  SELECT id, name, city
    FROM author
```
