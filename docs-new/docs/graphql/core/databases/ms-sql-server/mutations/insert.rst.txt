<div class="meta"
description="Insert an object into MS SQL Server using a mutation"
keywords="hasura, docs, ms sql server, mutation, insert">

</div>

# MS SQL Server: Insert mutation

<div class="contents" backlinks="none" depth="1" local="">

Table of contents

</div>

## Auto-generated insert mutation schema

**For example**, the auto-generated schema for the insert mutation field
for a table `article` looks like the following:

``` graphql
insert_article (
  objects: [article_insert_input!]!
  if_matched: article_if_matched
): article_mutation_response

# response of any mutation on the table "article"
type article_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!
  # data of the affected rows by the mutation
  returning: [article!]!
}

# single object insert
insert_article_one (
  object: article_insert_input!
  if_matched: article_if_matched
): article
```

As you can see from the schema:

-   `objects` argument is mandatory and you can pass multiple `objects`
    to the mutation.
-   You can pass an `if_matched` argument to convert the mutation to an
    `upsert mutation <ms_sql_server_upsert>`.
-   You can return the number of affected rows and the affected objects
    (with nested objects) in the response.
-   You can use the single object insert to get the inserted object
    directly as the mutation response.

<div class="note">

<div class="title">

Note

</div>

If a table is not in the `dbo` MS SQL Server schema, the insert mutation
field will be of the format `insert_<schema_name>_<table_name>`.

</div>

## Insert a single object

**Example:** Insert a new `article` object and return the inserted
article object in the response:

<div class="graphiql" view_only=""
query="mutation insert_single_article {
  insert_article_one(
    object: {
      title: &quot;Article 1&quot;,
      content: &quot;Sample article content&quot;,
      author_id: 3
    }
  ) {
    id
    title
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_article_one&quot;: {
      &quot;id&quot;: 21,
      &quot;title&quot;: &quot;Article 1&quot;
    }
  }
}">

</div>

Using variables:

<div class="graphiql" view_only=""
query="mutation insert_single_article($object: article_insert_input! ) {
  insert_article_one(object: $object) {
    id
    title
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_article_one&quot;: {
      &quot;id&quot;: 21,
      &quot;title&quot;: &quot;Article 1&quot;
    }
  }
}
:variables:
{
  &quot;object&quot;: {
    &quot;title&quot;: &quot;Article 1&quot;,
    &quot;content&quot;: &quot;Sample article content&quot;,
    &quot;author_id&quot;: 3
  }
}">

</div>

<div class="note">

<div class="title">

Note

</div>

The `insert_<object>_one` mutation will **only** be available if you
have select permissions on the table, as it returns the inserted row.

</div>

## Insert multiple objects of the same type in the same mutation

**Example:** Insert 2 new `article` objects and return both the article
objects in the response:

<div class="graphiql" view_only=""
query="mutation insert_multiple_articles {
  insert_article(
    objects: [
      {
        title: &quot;Article 2&quot;,
        content: &quot;Sample article content&quot;,
        author_id: 4
      },
      {
        title: &quot;Article 3&quot;,
        content: &quot;Sample article content&quot;,
        author_id: 5
      }
    ]
  ) {
    returning {
      id
      title
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_article&quot;: {
      &quot;affected_rows&quot;: 2,
      &quot;returning&quot;: [
        {
          &quot;id&quot;: 22,
          &quot;title&quot;: &quot;Article 2&quot;
        },
        {
          &quot;id&quot;: 23,
          &quot;title&quot;: &quot;Article 3&quot;
        }
      ]
    }
  }
}">

</div>

Using variables:

<div class="graphiql" view_only=""
query="mutation insert_multiple_articles($objects: [article_insert_input!]! ) {
  insert_article(objects: $objects) {
    returning {
      id
      title
    }
  }
}
:response:
{
    &quot;data&quot;: {
      &quot;insert_article&quot;: {
        &quot;affected_rows&quot;: 2,
        &quot;returning&quot;: [
          {
            &quot;id&quot;: 22,
            &quot;title&quot;: &quot;Article 2&quot;
          },
          {
            &quot;id&quot;: 23,
            &quot;title&quot;: &quot;Article 3&quot;
          }
        ]
      }
    }
  }
:variables:
{
  &quot;objects&quot;: [
    {
      &quot;title&quot;: &quot;Article 2&quot;,
      &quot;content&quot;: &quot;Sample article content&quot;,
      &quot;author_id&quot;: 4
    },
    {
      &quot;title&quot;: &quot;Article 3&quot;,
      &quot;content&quot;: &quot;Sample article content&quot;,
      &quot;author_id&quot;: 5
    }
  ]
}">

</div>

## Insert an object and get a nested object in response

**Example:** Insert a new `article` object and return the inserted
article object with its author in the response:

<div class="graphiql" view_only="" query="mutation insert_article {
  insert_article(
    objects: [
      {
        title: &quot;Article 1&quot;,
        content: &quot;Sample article content&quot;,
        author_id: 3
      }
    ]
  ) {
    returning {
      id
      title
      author {
        id
        name
      }
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: [
        {
          &quot;id&quot;: 21,
          &quot;title&quot;: &quot;Article 1&quot;,
          &quot;author&quot;: {
            &quot;id&quot;: 3,
            &quot;name&quot;: &quot;Sidney&quot;
          }
        }
      ]
    }
  }
}">

</div>

## Set a field to its default value during insert

To set a field to its `default` value, just omit it from the input
object, irrespective of the default value configuration i.e. via MS SQL
Server defaults or using column presets.

**Example:** If the default value of `id` is set to auto-incrementing
integer, there's no need to pass the `id` field to the input object:

<div class="graphiql" view_only=""
query="mutation insert_article_with_def_id {
  insert_article(
    objects: [
      {
        title: &quot;Article 1&quot;,
        content: &quot;Sample article content&quot;,
        author_id: 3
      }
    ]
  ) {
    returning {
      id
      title
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_article&quot;: {
      &quot;affected_rows&quot;: 1,
      &quot;returning&quot;: [
        {
          &quot;id&quot;: 21,
          &quot;title&quot;: &quot;Article 1&quot;
        }
      ]
    }
  }
}">

</div>

## Set a field to NULL during insert

If a field is `nullable` in the database, to set its value to `null`,
either pass its value as `null` or just omit it from the input object.

**Example:** If `age` is a nullable field, to set it to `null`, either
don't pass the age field to the input object or pass it as `null`:

<div class="graphiql" view_only=""
query="mutation insert_author_with_null_age {
  insert_author(
    objects: [
      {
        name: &quot;Jeff&quot;
      }
    ]
  ) {
    returning {
      id
      name
      age
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_author&quot;: {
      &quot;returning&quot;: [
        {
            &quot;id&quot;: 11,
            &quot;name&quot;: &quot;Jeff&quot;,
            &quot;age&quot;: null
        }
      ]
    }
  }
}">

</div>

OR

<div class="graphiql" view_only=""
query="mutation insert_author_with_null_age {
  insert_author(
    objects: [
      {
        name: &quot;Jeff&quot;,
        age: null
      }
    ]
  ) {
    returning {
      id
      name
      age
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_author&quot;: {
      &quot;returning&quot;: [
        {
            &quot;id&quot;: 11,
            &quot;name&quot;: &quot;Jeff&quot;,
            &quot;age&quot;: null
        }
      ]
    }
  }
}">

</div>
