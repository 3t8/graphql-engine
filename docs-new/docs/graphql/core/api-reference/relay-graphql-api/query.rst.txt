<div class="meta"
description="Hasura Relay GraphQL API queries and subscriptions API reference"
keywords="hasura, docs, GraphQL API, API reference, query, subscription, relay">

</div>

# Relay API Reference - Query / Subscription

<div class="contents" backlinks="none" depth="3" local="">

Table of contents

</div>

## **query** / **subscription** syntax

``` none
query|subscription [<op-name>] {
  connection-object [([argument])]{
    connection-object-fields
  }
}
```

| Key               | Required | Schema                                | Description                                                               |
|-------------------|----------|---------------------------------------|---------------------------------------------------------------------------|
| op-name           | false    | Value                                 | Name query/subscription for observability                                 |
| connection-object | true     | [ConnectionObject](#ConnectionObject) | Name of the table connection                                              |
| argument          | false    | [Argument](#argument)                 | One or more filter criteria, instructions for sorting order or pagination |

**Example: Relay Query**

``` graphql
query {
  author_connection(first: 2){
    pageInfo {
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        id
        name
        username
      }
    }
  }
}
```

**Example: Relay Subscription**

``` graphql
subscription {
  author_connection(first: 2){
    pageInfo {
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        id
        name
        username
      }
    }
  }
}
```

<div class="note">

<div class="title">

Note

</div>

For details of usage, please see `this page <relay_schema>`.

</div>

## Syntax definitions

### Connection Object

``` none
connection-object {
  pageInfo: {
    hasNextPage
    hasPreviousPage
    startCursor
    endCursor
  }
  edges: {
    cursor
    node: {
      id
      field1
      field2
      json_field[(path: String)]
      ..
      nested object1
      nested object2
      aggregate nested object1
      ..
    }
  }
}
```

| Field    | Type                   |
|----------|------------------------|
| pageInfo | [PageInfo](#pageinfo)! |
| edges    | \[[Edge](#edge)!\]!    |

<div class="note">

<div class="title">

Note

</div>

For more details on the Relay `connection` object type, refer to the
[Relay
docs](https://relay.dev/graphql/connections.htm#sec-Connection-Types).

</div>

### PageInfo

Information useful for pagination.

``` graphql
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}
```

<div class="note">

<div class="title">

Note

</div>

For more details on the Relay `PageInfo` object type, refer to the
[Relay
docs](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).

</div>

### Edge

Edge is an object type that consists of a `cursor <Cursor>` and `node`
fields. `node` is a table object type which implements the Relay `Node`
interface.

``` graphql
type tableEdge {
  cursor: String!
  node: table!
}
```

### Cursor

The cursor field returns a unique non-null String value which is useful
for `pagination <RelayPaginationExp>`.

<div class="note">

<div class="title">

Note

</div>

For more details on the Relay `cursor`, refer to the [Relay
docs](https://relay.dev/graphql/connections.htm#sec-Cursor).

</div>

### Argument

<div class="parsed-literal">

`DistinctOnExp <RelayDistinctOnExp>` \| `WhereExp <RelayWhereExp>` \|
`OrderByExp <RelayOrderByExp>` \| `PaginationExp <RelayPaginationExp>`

</div>

#### DistinctOnExp

Same as the generic `DistinctOnExp`

#### WhereExp

Same as the generic `WhereExp`

#### OrderByExp

Same as the generic `OrderByExp`

#### PaginationExp

**Forward Pagination:**

<div class="parsed-literal">

first: Integer \[after: [Cursor](#cursor)\]

</div>

``` graphql
query {
  article_connection(
    first: 2
    after: "eyJpZCIgOiAzfQ=="
  ){
    pageInfo {
      startCursor
      endCursor
      hasPreviousPage
      hasNextPage
    }
    edges {
      cursor
      node {
        title
        content
        author_id
      }
    }
  }
}
```

**Backward Pagination:**

<div class="parsed-literal">

\[last: Integer\] \[before: [Cursor](#cursor)\]

</div>

``` graphql
query {
  article_connection(
    last: 2
    before: "eyJpZCIgOiA0fQ=="
  ){
    pageInfo {
      startCursor
      endCursor
      hasPreviousPage
      hasNextPage
    }
    edges {
      cursor
      node{
        title
        content
        author_id
      }
    }
  }
}
```
