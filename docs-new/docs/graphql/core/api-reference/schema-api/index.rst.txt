<div class="meta" description="Hasura schema API reference"
keywords="hasura, docs, schema API, API reference">

</div>

# Schema API Reference

<div class="contents" backlinks="none" depth="1" local="">

Table of contents

</div>

## Introduction

The schema API provides the following features:

1.  Execute SQL on the underlying Postgres database, supports schema
    modifying actions.

This is primarily intended to be used as an `admin` API to manage the
Hasura schema.

<div class="admonition">

Supported from

The schema API is supported for versions `v2.0.0` and above and replaces
the older `schema/metadata API <schema_metadata_apis>`.

</div>

## Endpoint

All requests are `POST` requests to the `/v2/query` endpoint.

## Request structure

```http
POST /v2/query HTTP/1.1

{
   "type": "<query-type>",
   "args": <args-object>
}
```

### Request body

<div class="parsed-literal">

`Query <schema_query>`

</div>

#### Query

| Key     | Required | Schema     | Description                     |
|---------|----------|------------|---------------------------------|
| type    | true     | String     | Type of the query               |
| args    | true     | JSON Value | The arguments to the query      |
| version | false    | Integer    | Version of the API (default: 1) |

## Request types

The various types of queries are listed in the following table:

| `type`           | `args`                                 | `version` | Synopsis                                      |
|------------------|----------------------------------------|-----------|-----------------------------------------------|
| **bulk**         | `Query <schema_query>` array           | 1         | Execute multiple operations in a single query |
| `schema_run_sql` | `run_sql_args <schema_run_sql_syntax>` | 1         | Run SQL directly on Postgres                  |

## Response structure

<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>Status code</th>
<th>Description</th>
<th>Response structure</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>200</code></td>
<td>Success</td>
<td><div class="parsed-literal">
<p>Request specific</p>
</div></td>
</tr>
<tr class="even">
<td><code>400</code></td>
<td>Bad request</td>
<td><div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;path&quot;</span>  <span class="op">:</span> <span class="dt">String</span>,</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;error&quot;</span> <span class="op">:</span> <span class="dt">String</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div></td>
</tr>
<tr class="odd">
<td><code>401</code></td>
<td>Unauthorized</td>
<td><div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;error&quot;</span> <span class="op">:</span> <span class="dt">String</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div></td>
</tr>
<tr class="even">
<td><code>500</code></td>
<td>Internal server error</td>
<td><div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;error&quot;</span> <span class="op">:</span> <span class="dt">String</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div></td>
</tr>
</tbody>
</table>

## Disabling schema API

Since this API can be used to make changes to the GraphQL schema, it can
be disabled, especially in production deployments.

The `enabled-apis` flag or the `HASURA_GRAPHQL_ENABLED_APIS` env var can
be used to enable/disable this API. By default, the schema/metadata API
is enabled. To disable it, you need to explicitly state that this API is
not enabled i.e. remove it from the list of enabled APIs.

```bash
# enable only graphql api, disable metadata and pgdump
--enabled-apis="graphql"
HASURA_GRAPHQL_ENABLED_APIS="graphql"
```

See `server_flag_reference` for info on setting the above flag/env var.

<div class="toctree" maxdepth="1" hidden="">

Run SQL \<run-sql>

</div>
