<div class="meta"
description="Model one-to-many relationships in Hasura"
keywords="hasura, docs, schema, relationship, one-to-many, 1-n">

</div>

# Modelling one-to-many table relationships

<div class="contents" backlinks="none" depth="1" local="">

Table of contents

</div>

## Introduction

A `one-to-many` relationship between two tables can be established via a
**foreign key constraint**.

Say we have the following two tables in our database schema:

```sql
authors (
  id SERIAL PRIMARY KEY,
  name TEXT
)

articles (
  id SERIAL PRIMARY KEY,
  author_id INT
  title TEXT
  ...
)
```

These two tables are related via a `one-to-many` relationship. i.e:

-   an `author` can have many `articles`
-   an `article` has one `author`

## Step 1: Set up a table relationship in the database

This `one-to-many` relationship can be established in the database by:

1.  Adding a **foreign key constraint** from the `articles` table to the
    `authors` table using the `author_id` and `id` columns of the tables
    respectively.

This will ensure that the value of `author_id` column in the `articles`
table is present in the `id` column of the `authors` table.

## Step 2: Set up GraphQL relationships

To access the nested objects via the GraphQL API,
`create the following relationships <pg_create_relationships>`:

-   Array relationship, `articles` from `authors` table using
    `articles :: author_id  ->  id`
-   Object relationship, `author` from `articles` table using
    `author_id -> authors :: id`

## Query using one-to-many relationships

We can now:

-   fetch a list of `authors` with their `articles`:

    <div class="graphiql" view_only="" query="query {
      authors {
        id
        name
        articles {
          id
          title
        }
      }
    }
    :response:
    {
      &quot;data&quot;: {
        &quot;authors&quot;: [
          {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;Justin&quot;,
            &quot;articles&quot;: [
              {
                &quot;id&quot;: 15,
                &quot;title&quot;: &quot;vel dapibus at&quot;
              },
              {
                &quot;id&quot;: 16,
                &quot;title&quot;: &quot;sem duis aliquam&quot;
              }
            ]
          },
          {
            &quot;id&quot;: 2,
            &quot;name&quot;: &quot;Beltran&quot;,
            &quot;articles&quot;: [
              {
                &quot;id&quot;: 2,
                &quot;title&quot;: &quot;a nibh&quot;
              },
              {
                &quot;id&quot;: 9,
                &quot;title&quot;: &quot;sit amet&quot;
              }
            ]
          }
        ]
      }
    }">

    </div>

-   fetch a list of `articles` with their `author`:

    <div class="graphiql" view_only="" query="query {
      articles {
        id
        title
        author {
          id
          name
        }
      }
    }
    :response:
    {
      &quot;data&quot;: {
        &quot;articles&quot;: [
          {
            &quot;id&quot;: 1,
            &quot;title&quot;: &quot;sit amet&quot;,
            &quot;author&quot;: {
              &quot;id&quot;: 4,
              &quot;name&quot;: &quot;Anjela&quot;
            }
          },
          {
            &quot;id&quot;: 2,
            &quot;title&quot;: &quot;a nibh&quot;,
            &quot;author&quot;: {
              &quot;id&quot;: 2,
              &quot;name&quot;: &quot;Beltran&quot;
            }
          }
        ]
      }
    }">

    </div>

## Insert using one-to-many relationships

We can now:

-   insert an `author` with their `articles` where the author might
    already exist (assume unique `name` for `author`):

<div class="graphiql" view_only=""
query="mutation UpsertAuthorWithArticles {
  insert_author(objects: {
    name: &quot;Felix&quot;,
    articles: {
      data: [
        {
          title: &quot;Article 1&quot;,
          content: &quot;Article 1 content&quot;
        },
        {
          title: &quot;Article 2&quot;,
          content: &quot;Article 2 content&quot;
        }
      ]
    }
  },
    on_conflict: {
      constraint: author_name_key,
      update_columns: [name]
    }
  ) {
    returning {
      name
      articles {
        title
        content
      }
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_author&quot;: {
      &quot;returning&quot;: [
        {
          &quot;name&quot;: &quot;Felix&quot;,
          &quot;articles&quot;: [
            {
              &quot;title&quot;: &quot;Article 1&quot;,
              &quot;content&quot;: &quot;Article 1 content&quot;
            },
            {
              &quot;title&quot;: &quot;Article 2&quot;,
              &quot;content&quot;: &quot;Article 2 content&quot;
            }
          ]
        }
      ]
    }
  }
}">

</div>

-   insert `articles` with their `author` where the `author` might
    already exist (assume unique `name` for `author`):

<div class="graphiql" view_only=""
query="mutation upsertArticleWithAuthors {
  insert_article(objects: [
    {
      title: &quot;Article 1&quot;,
      content: &quot;Article 1 content&quot;,
      author: {
        data: {
          name: &quot;Alice&quot;
        },
        on_conflict: {
          constraint: author_name_key,
          update_columns: [name]
        }
      }
    },
    {
      title: &quot;Article 2&quot;,
      content: &quot;Article 2 content&quot;,
      author: {
        data: {
          name: &quot;Alice&quot;
        },
        on_conflict: {
          constraint: author_name_key,
          update_columns: [name]
        }
      }
    }
  ]) {
    returning {
      title
      content
      author {
        name
      }
    }
  }
}
:response:
{
  &quot;data&quot;: {
    &quot;insert_article&quot;: {
      &quot;returning&quot;: [
        {
          &quot;title&quot;: &quot;Article 1&quot;,
          &quot;content&quot;: &quot;Article 1 content&quot;,
          &quot;author&quot;: {
            &quot;name&quot;: &quot;Alice&quot;
          }
        },
        {
          &quot;title&quot;: &quot;Article 2&quot;,
          &quot;content&quot;: &quot;Article 2 content&quot;,
          &quot;author&quot;: {
            &quot;name&quot;: &quot;Alice&quot;
          }
        }
      ]
    }
  }
}">

</div>

<div class="note">

<div class="title">

Note

</div>

You can avoid the `on_conflict` clause if you will never have conflicts.

</div>
