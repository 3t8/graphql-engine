<div class="meta" description="Hasura metadata catalogue"
keywords="hasura, docs, metadata catalogue, how it works">

</div>

# Metadata catalogue

<div class="contents" backlinks="none" depth="2" local="">

Table of contents

</div>

## What is the metadata catalogue?

The Hasura metadata catalogue is a set of internal tables used to manage
the state of the database and the GraphQL schema. Hasura GraphQL engine
uses the data in the catalogue to generate the GraphQL API which then
can be accessed from different clients.

The Hasura GraphQL engine stores this catalogue in a Postgres metadata
database *(which is by default the same database from which data is
served over the GraphQL API if it is Postgres)*. When initialized, the
Hasura GraphQL engine creates a schema called `hdb_catalog` in the
metadata database and initializes a few tables under it as described
below.

## **hdb_catalog** schema

This schema is created by the Hasura GraphQL engine to manage its
internal state. Whenever a table/permission/relationship is
created/updated using the Hasura console or the metadata API, the Hasura
GraphQL engine captures that information and stores it in the
corresponding tables.

The following tables are used by the Hasura GraphQL engine:

### **hdb_table** table

This table stores information about all the tables/views which are
created/tracked using the Hasura console or the metadata API.

#### Schema

<div class="thumbnail" width="30%" alt="hdb_table schema">

/img/graphql/core/engine-internals/hdb_table.jpg

</div>

#### Column Definitions

| column            | description                                                                                                                                           |
|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| table_schema      | Captures information about the schema under which a table/view is tracked                                                                             |
| table_name        | Captures name of the tracked table/view.                                                                                                              |
| is_system_defined | If it is true, then the table/view is created by GraphQL engine for internal purpose. If it is false, then the table/view is created by the end user. |

### **hdb_relationship** table

This table stores information about the relationships created for
tables/views using the Hasura console or the metadata API.

#### Schema

<div class="thumbnail" width="30%" alt="hdb_relationship schema">

/img/graphql/core/engine-internals/hdb_relationship.jpg

</div>

#### Column Definitions

<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="header">
<th>column</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>table_schema</td>
<td>Captures information about the schema under which a relationship is created.</td>
</tr>
<tr class="even">
<td>table_name</td>
<td>Captures name of the table/view under which a relationship is created.</td>
</tr>
<tr class="odd">
<td>rel_name</td>
<td>Captures name of the relationship.</td>
</tr>
<tr class="even">
<td>rel_type</td>
<td>Captures the permission type (insert/select/update/delete).</td>
</tr>
<tr class="odd">
<td>perm_def</td>
<td><p>Captures information about how the relationship is defined.</p>
<p>For example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;foreign_key_constraint_on&quot;</span><span class="fu">:</span> <span class="st">&quot;user_id&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div></td>
</tr>
<tr class="even">
<td>comment</td>
<td>Captures the comment for the relationship.</td>
</tr>
<tr class="odd">
<td>is_system_defined</td>
<td>If it is true, then the relationship is created by GraphQL engine for internal purpose. If it is false, then the relationship is created by the end user.</td>
</tr>
</tbody>
</table>

### **hdb_permission** table

This table stores information about the access control rules on
tables/views set up using the Hasura console or the metadata API.

#### Schema

<div class="thumbnail" width="30%" alt="hdb_permission schema">

/img/graphql/core/engine-internals/hdb_permission.jpg

</div>

#### Column Definitions

<table>
<colgroup>
<col style="width: 19%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="header">
<th>column</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>table_schema</td>
<td>Captures information about the schema under which a permission is created.</td>
</tr>
<tr class="even">
<td>table_name</td>
<td>Captures name of the table/view under which a permission is created.</td>
</tr>
<tr class="odd">
<td>role_name</td>
<td>Captures name of the role for which this permission will be applicable.</td>
</tr>
<tr class="even">
<td>perm_type</td>
<td>Captures the permission type (insert/select/update/delete).</td>
</tr>
<tr class="odd">
<td>perm_def</td>
<td><p>Captures information about how the permission is defined.</p>
<p>Whenever a request is made with the above role for the above table GraphQL engine will first validate the requested columns with the columns which the user has access to using the <code>columns</code> key. Once the request is validated the appropriate results are returned after applying the filter defined in the <code>filter</code> key.</p>
<p>For example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;columns&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="st">&quot;id&quot;</span><span class="ot">,</span> <span class="st">&quot;name&quot;</span><span class="ot">]</span><span class="fu">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;filter&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;_eq&quot;</span><span class="fu">:</span> <span class="st">&quot;X-HASURA-USER-ID&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div></td>
</tr>
<tr class="even">
<td>comment</td>
<td>Captures the comment for the permission.</td>
</tr>
<tr class="odd">
<td>is_system_defined</td>
<td>If it is true, then the permission is created by GraphQL engine for internal purpose. If it is false, then the permission is created by the end user.</td>
</tr>
</tbody>
</table>

<div class="note">

<div class="title">

Note

</div>

This section is a work in progress. There have been other tables and
columns added to the catalogue to support new features since this was
last updated.

</div>

## Exploring the catalogue

You can check the current schema and contents of the catalogue by
exploring the `hdb_catalog` schema in the metadata database through a
Postgres client.

## Catalogue versioning

Whenever the schema of the catalogue is modified *(typically to support
new features)* a new version of the catalogue is generated.

The catalogue version is upgraded automatically on startup if a new
version is available during Hasura GraphQL engine updates.
